{"version":3,"file":"ReactHookSSE.min.js","sources":["../../src/createSourceManager.ts","../../src/SSEContext.ts","../../src/useSSE.ts"],"sourcesContent":["import { Source, Listener } from './source';\n\ntype State = {\n  source: Source | null;\n  listenersByName: Map<string, Set<Listener>>;\n};\n\nexport type SourceManager = {\n  addEventListener(name: string, listener: Listener): void;\n  removeEventListener(name: string, listener: Listener): void;\n};\n\nexport const createSourceManager = (\n  createSource: () => Source\n): SourceManager => {\n  const state: State = {\n    source: null,\n    listenersByName: new Map(),\n  };\n\n  return {\n    addEventListener(name, listener) {\n      if (!state.listenersByName.size) {\n        state.source = createSource();\n      }\n\n      if (!state.source) {\n        throw new Error(\"The source doesn't exist\");\n      }\n\n      const listeners = state.listenersByName.get(name) || new Set();\n\n      listeners.add(listener);\n\n      state.listenersByName.set(name, listeners);\n\n      state.source.addEventListener(name, listener);\n    },\n    removeEventListener(name, listener) {\n      if (!state.source) {\n        throw new Error(\"The source doesn't exist\");\n      }\n\n      const listeners = state.listenersByName.get(name) || new Set();\n\n      listeners.delete(listener);\n\n      if (!listeners.size) {\n        state.listenersByName.delete(name);\n      }\n\n      state.source.removeEventListener(name, listener);\n\n      if (!state.listenersByName.size) {\n        state.source.close();\n        state.source = null;\n      }\n    },\n  };\n};\n","import * as React from 'react';\nimport { SourceManager, createSourceManager } from './createSourceManager';\nimport { Source } from './source';\n\nexport const SSEContext = React.createContext<SourceManager | null>(null);\n\nexport const SSEConsumer = SSEContext.Consumer;\n\ntype WithSource = { source: () => Source };\ntype WithEndpoint = { endpoint: string };\ntype Props = React.PropsWithChildren<WithSource | WithEndpoint>;\n\nconst isPropsWithSource = (_: WithSource | WithEndpoint): _ is WithSource =>\n  'source' in _;\n\nconst createDefaultSource = (endpoint: string) => (): Source =>\n  new window.EventSource(endpoint);\n\nexport const SSEProvider: React.FC<Props> = ({ children, ...props }) => {\n  const [source] = React.useState(() =>\n    createSourceManager(\n      !isPropsWithSource(props)\n        ? createDefaultSource(props.endpoint)\n        : props.source\n    )\n  );\n\n  return React.createElement(\n    SSEContext.Provider,\n    {\n      value: source,\n    },\n    children\n  );\n};\n","import { useContext, useReducer, useEffect } from 'react';\nimport { Listener, Event } from './source';\nimport { SSEContext } from './SSEContext';\n\ntype Action<T> = { event: Event; data: T };\ntype StateReducer<S, T> = (state: S, changes: Action<T>) => S;\ntype Parser<T> = (data: any) => T;\n\nexport type Options<S, T = S> = {\n  stateReducer?: StateReducer<S, T>;\n  parser?: Parser<T>;\n  context?: typeof SSEContext;\n};\n\nexport function useSSE<S, T = S>(\n  eventName: string,\n  initialState: S,\n  options?: Options<S, T>\n): S {\n  const {\n    stateReducer = (_: S, action: Action<any>) => action.data,\n    parser = (data: any) => JSON.parse(data),\n    context = SSEContext,\n  } = options || {};\n\n  const source = useContext(context);\n  const [state, dispatch] = useReducer<StateReducer<S, T>>(\n    stateReducer,\n    initialState\n  );\n\n  if (!source) {\n    throw new Error(\n      'Could not find an SSE context; You have to wrap useSSE() in a <SSEProvider>.'\n    );\n  }\n\n  useEffect(() => {\n    const listener: Listener = event => {\n      const data = parser(event.data);\n\n      dispatch({\n        event,\n        data,\n      });\n    };\n\n    source.addEventListener(eventName, listener);\n\n    return () => {\n      source.removeEventListener(eventName, listener);\n    };\n  }, []);\n\n  return state;\n}\n"],"names":["SSEContext","React","createContext","SSEConsumer","Consumer","_ref","children","props","_objectWithoutProperties","_excluded","source","_slicedToArray","useState","createSource","endpoint","window","EventSource","state","listenersByName","Map","addEventListener","name","listener","size","Error","listeners","get","Set","add","set","removeEventListener","delete","close","createElement","Provider","value","eventName","initialState","options","_ref$stateReducer","stateReducer","_","action","data","_ref$parser","parser","JSON","parse","_ref$context","context","useContext","_useReducer2","useReducer","dispatch","useEffect","event"],"mappings":"q4DAYO,mBCRMA,EAAaC,EAAMC,cAAoC,MAEvDC,EAAcH,EAAWI,sDAYM,SAA4BC,GAAA,IAAzBC,IAAAA,SAAaC,EAAYC,EAAAH,EAAAI,GAC/DC,EAAPC,EAAiBV,EAAMW,UAAS,WAAA,ODNhCC,ECAA,WAQuBN,EAEfA,EAAMG,QARaI,EAOCP,EAAMO,SAPc,WAAA,OAChD,IAAIC,OAAOC,YAAYF,KDDjBG,EAAe,CACnBP,OAAQ,KACRQ,gBAAiB,IAAIC,KAGhB,CACLC,iBAAiBC,SAAAA,EAAMC,GAKrB,GAJKL,EAAMC,gBAAgBK,OACzBN,EAAMP,OAASG,MAGZI,EAAMP,OACT,MAAM,IAAIc,MAAM,4BAGlB,IAAMC,EAAYR,EAAMC,gBAAgBQ,IAAIL,IAAS,IAAIM,IAEzDF,EAAUG,IAAIN,GAEdL,EAAMC,gBAAgBW,IAAIR,EAAMI,GAEhCR,EAAMP,OAAOU,iBAAiBC,EAAMC,IAEtCQ,oBAAoBT,SAAAA,EAAMC,GACxB,IAAKL,EAAMP,OACT,MAAM,IAAIc,MAAM,4BAGlB,IAAMC,EAAYR,EAAMC,gBAAgBQ,IAAIL,IAAS,IAAIM,IAEzDF,EAAUM,OAAOT,GAEZG,EAAUF,MACbN,EAAMC,gBAAgBa,OAAOV,GAG/BJ,EAAMP,OAAOoB,oBAAoBT,EAAMC,GAElCL,EAAMC,gBAAgBK,OACzBN,EAAMP,OAAOsB,QACbf,EAAMP,OAAS,QA3CY,IACjCG,EAEMI,ECAqBH,KAI3B,GAAA,GAQA,OAAOb,EAAMgC,cACXjC,EAAWkC,SACX,CACEC,MAAOzB,GAETJ,aClBG,SACL8B,EACAC,EACAC,GAEA,IAIIA,EAAAA,GAAW,GAJfC,EAAAlC,EACEmC,aAAAA,OADF,IAAAD,EACiB,SAACE,EAAMC,GAAP,OAA+BA,EAAOC,MADvDJ,EAAAK,EAAAvC,EAEEwC,OAAAA,OAAS,IAAAD,EAAA,SAACD,GAAD,OAAeG,KAAKC,MAAMJ,IAFrCC,EAAAI,EAAA3C,EAGE4C,QAAAA,aAAUjD,EAHZgD,EAMMtC,EAASwC,aAAWD,GAC1BE,EAAAxC,EAA0ByC,EAAAA,WACxBZ,EACAH,GAFF,GAAOpB,EAAPkC,EAAA,GAAcE,EAAdF,EAAA,GAKA,IAAKzC,EACH,MAAM,IAAIc,MACR,gFAqBJ,OAjBA8B,EAAAA,WAAU,WACR,IAAMhC,EAAqB,SAAAiC,GACzB,IAAMZ,EAAOE,EAAOU,EAAMZ,MAE1BU,EAAS,CACPE,MAAAA,EACAZ,KAAAA,KAMJ,OAFAjC,EAAOU,iBAAiBgB,EAAWd,GAE5B,WACLZ,EAAOoB,oBAAoBM,EAAWd,MAEvC,IAEIL"}