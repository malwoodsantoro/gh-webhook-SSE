{
  "_from": "react-hooks-sse",
  "_id": "react-hooks-sse@2.1.0",
  "_inBundle": false,
  "_integrity": "sha512-w7gFWUd8BPfb1bnB5A7zNX2scSttKQQeozJ/jJV0Bnh+7sXeWz+KMwtrEPRrzUzt0CvL7C1ClHJvO3s5pBVJFQ==",
  "_location": "/react-hooks-sse",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "react-hooks-sse",
    "fetchSpec": "latest",
    "name": "react-hooks-sse",
    "raw": "react-hooks-sse",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/react-hooks-sse/-/react-hooks-sse-2.1.0.tgz",
  "_shasum": "c48cb10896ee5e351422454d3fcd342fd3525245",
  "_spec": "react-hooks-sse",
  "_where": "/Users/mallorywood/pr-3",
  "bundleDependencies": false,
  "dependencies": {
    "@babel/runtime": "^7.1.5"
  },
  "deprecated": false,
  "description": "React Hook for SSE",
  "devDependencies": {
    "@babel/cli": "^7.15.7",
    "@babel/core": "^7.15.8",
    "@babel/plugin-transform-runtime": "^7.18.0",
    "@babel/preset-env": "^7.15.8",
    "@babel/preset-typescript": "^7.15.0",
    "@rollup/plugin-babel": "^5.3.1",
    "@rollup/plugin-commonjs": "^22.0.0",
    "@rollup/plugin-node-resolve": "^13.3.0",
    "@types/jest": "^26.0.0",
    "@types/react": "^18.0.9",
    "@types/react-dom": "^18.0.5",
    "@types/react-test-renderer": "^18.0.0",
    "@typescript-eslint/eslint-plugin": "^5.26.0",
    "@typescript-eslint/parser": "^5.26.0",
    "babel-jest": "^28.1.0",
    "eslint": "^7.32.0",
    "eslint-config-airbnb": "^18.2.1",
    "eslint-config-airbnb-typescript": "^12.3.1",
    "eslint-config-prettier": "^7.2.0",
    "eslint-plugin-import": "^2.23.4",
    "eslint-plugin-jsx-a11y": "^6.4.1",
    "eslint-plugin-prettier": "^3.4.0",
    "eslint-plugin-react": "^7.20.3",
    "eslint-plugin-react-hooks": "^4.2.0",
    "jest": "^28.1.0",
    "jest-watch-typeahead": "^1.1.0",
    "prettier": "^2.6.2",
    "react": "^17.0.2",
    "react-test-renderer": "^17.0.2",
    "rollup": "^2.60.2",
    "rollup-plugin-terser": "^7.0.2",
    "typescript": "^4.7.2"
  },
  "files": [
    "dist",
    "src",
    "README",
    "LICENCE"
  ],
  "keywords": [
    "react",
    "hooks",
    "sse"
  ],
  "license": "MIT",
  "main": "dist/cjs/index.js",
  "module": "dist/es/index.js",
  "name": "react-hooks-sse",
  "optionalDependencies": {},
  "peerDependencies": {
    "react": ">= 16.7.0"
  },
  "readme": "# React Hooks SSE\n\n[![npm version](https://badge.fury.io/js/react-hooks-sse.svg)](https://badge.fury.io/js/react-hooks-sse) [![Build Status](https://travis-ci.org/samouss/react-hooks-sse.svg?branch=master)](https://travis-ci.org/samouss/react-hooks-sse)\n\n## Installation\n\n```\nyarn add react-hooks-sse\n```\n\n## Usage\n\n```jsx\nimport React from 'react';\nimport { useSSE, SSEProvider } from 'react-hooks-sse';\n\nconst Comments = () => {\n  const state = useSSE('comments', {\n    count: null\n  });\n\n  return state.count ? state.count : '...';\n};\n\nconst App = () => (\n  <SSEProvider endpoint=\"https://sse.example.com\">\n    <h1>Subscribe & update to SSE event</h1>\n    <Comments />\n  </SSEProvider>\n);\n```\n\n> Checkout [the example](/example) on the project\n\n## API\n\n#### `SSEProvider`\n\nThe provider manages subscriptions to the SSE server. You can subscribe multiple times to the same event or on different events. The source is lazy, it is created only when one of the hooks is called. The source is destroyed when no more hooks are registered. It is automatically re-created when a new hook is added.\n\n#### Usage\n\n```jsx\nimport React from 'react';\nimport { SSEProvider } from 'react-hooks-sse';\n\nconst App = () => (\n  <SSEProvider endpoint=\"https://sse.example.com\">\n    {/* ... */}\n  </SSEProvider>\n);\n```\n\n#### `endpoint: string`\n\n> The value is required when `source` is omitted.\n\nThe SSE endpoint to target. It uses the default source [`EventSource`][EventSource].\n\n```jsx\nimport React from 'react';\nimport { SSEProvider } from 'react-hooks-sse';\n\nconst App = () => (\n  <SSEProvider endpoint=\"https://sse.example.com\">\n    {/* ... */}\n  </SSEProvider>\n);\n```\n\n#### `source: () => Source`\n\n> The value is required when `endpoint` is omitted.\n\nYou can provide custom source to the provider. The main use cases are:\n\n- provide additional options to [`EventSource`][EventSource] e.g. [`withCredentials: true`](https://developer.mozilla.org/en-US/docs/Web/API/EventSource/EventSource#Parameters)\n- provide a custom source to control the network request e.g. set `Authorization` header\n\nHere is the interface that a source has to implement:\n\n```ts\ninterface Event {\n  data: any;\n}\n\ninterface Listener {\n  (event: Event): void;\n}\n\ninterface Source {\n  addEventListener(name: string, listener: Listener): void;\n  removeEventListener(name: string, listener: Listener): void;\n  close(): void;\n}\n```\n\nThe source is lazy, it is created only when a hook is added. That's why we provide a function to create a source not a source directly.\n\n```jsx\nimport React from 'react';\nimport { SSEProvider } from 'react-hooks-sse';\nimport { createCustomSource } from 'custom-source';\n\nconst App = () => (\n  <SSEProvider source={() => createCustomSource()}>\n    {/* ... */}\n  </SSEProvider>\n);\n```\n\n----\n\n#### `useSSE<S, T>(eventName: string, initialState: S, options?: Options<S, T>)`\n\nThe component that uses the hook must be scoped under a [`SSEProvider`](#SSEProvider) to have access to the source. Once the hook is created none of the options can be updated (at the moment). You have to unmout/remount the component to update the options.\n\n#### Usage\n\n```jsx\nconst state = useSSE('comments', {\n  count: null\n});\n```\n\n#### `eventName: string`\n\nThe name of the event that you want to listen.\n\n```jsx\nconst state = useSSE('comments', {\n  count: null\n});\n```\n\n#### `initialState: S`\n\nThe initial state to use on the first render.\n\n```jsx\nconst state = useSSE('comments', {\n  count: null\n});\n```\n\n#### `options?: Options<S, T>`\n\nThe options to control how the data is consumed from the source.\n\n```ts\ntype Action<T> = { event: Event; data: T };\ntype StateReducer<S, T> = (state: S, changes: Action<T>) => S;\ntype Parser<T> = (data: any) => T;\n\nexport type Options<S, T = S> = {\n  stateReducer?: StateReducer<S, T>;\n  parser?: Parser<T>;\n};\n```\n\n#### `options.stateReducer?: <S, T>(state: S, changes: Action<T>) => S`\n\nThe reducer to control how the state should be updated.\n\n```ts\ntype Action<T> = {\n  // event is provided by the source\n  event: Event;\n  // data is provided by the parser\n  data: T;\n};\n\nconst state = useSSE<S, T>(\n  'comments',\n  {\n    count: null,\n  },\n  {\n    stateReducer(state: S, action: Action<T>) {\n      return changes.data;\n    },\n  }\n);\n```\n\n#### `options.parser?: <T>(data: any) => T`\n\nThe parser to control how the event from the server is provided to the reducer.\n\n```jsx\nconst state = useSSE<S, T>(\n  'comments',\n  {\n    count: null,\n  },\n  {\n    parser(input: any): T {\n      return JSON.parse(input);\n    },\n  }\n);\n```\n\n## Run example\n\n```\nyarn start:server\n```\n\n```\nyarn start:example\n```\n\n## Run the build\n\n```\nyarn build\n```\n\n## Run the test\n\n```\nyarn test\n```\n\n[EventSource]: https://developer.mozilla.org/en-US/docs/Web/API/EventSource\n",
  "readmeFilename": "README.md",
  "scripts": {
    "build": "yarn type-check && yarn build:typings && yarn build:cjs && yarn build:esm && yarn build:umd",
    "build:cjs": "babel src --out-dir dist/cjs --extensions .ts --ignore 'src/**/__mocks__/**/*','src/**/__tests__/**/*'",
    "build:esm": "BABEL_ENV=esm babel src --out-dir dist/es --extensions .ts --ignore 'src/**/__mocks__/**/*','src/**/__tests__/**/*'",
    "build:typings": "yarn type-check --project tsconfig.typings.json",
    "build:umd": "BABEL_ENV=rollup rollup -c rollup.config.js",
    "lint": "eslint src --ext .ts",
    "source:link": "scripts/link.sh",
    "source:unlink": "scripts/unlink.sh",
    "start:example": "(cd example && yarn && yarn start)",
    "start:server": "(cd example && yarn && node server.js)",
    "test": "jest",
    "type-check": "tsc",
    "watch": "yarn build:cjs --watch"
  },
  "types": "dist/typings/index.d.ts",
  "version": "2.1.0"
}
